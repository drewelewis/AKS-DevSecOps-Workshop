on:
  push:
    branches:
      - main
    paths:
      - 'tools/deploy/module4/*text*'
  workflow_dispatch:

env:
  DEV_AZURE_CONTAINER_REGISTRY: ${{ vars.DEV_AZURE_CONTAINER_REGISTRY }}
  DEV_RESOURCE_GROUP: ${{ vars.DEV_RESOURCE_GROUP }}
  DEV_CLUSTER_NAME: ${{ vars.DEV_CLUSTER_NAME }}
  DEV_DEPLOYMENT_MANIFEST_PATH: ${{ vars.DEV_DEPLOYMENT_MANIFEST_PATH }}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
jobs:
  PushImagetoACR:
    name: Push Sample Image to ACR and AKS
    environment: test
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - name: Echo variables
        run: |
          echo "DEV_AZURE_CONTAINER_REGISTRY: ${{ env.DEV_AZURE_CONTAINER_REGISTRY }}"; 
          echo "DEV_RESOURCE_GROUP: ${{ env.DEV_RESOURCE_GROUP }}";
          echo "DEV_CLUSTER_NAME: ${{ env.DEV_CLUSTER_NAME }}";
          echo "DEV_DEPLOYMENT_MANIFEST_PATH: ${{ env.DEV_DEPLOYMENT_MANIFEST_PATH }}"
      # Checks out the repository this file is in
      - uses: actions/checkout@v3

      # Logs in with your Azure credentials
      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.DEV_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.DEV_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.DEV_AZURE_SUBSCRIPTION_ID }}
      # Pulling an image from Docker Hub to ACR. In a common CD scenario, 
      # the build and push of developed code would be part of a controlled workflow. 
      # The intention here is to show how environment variables and secrets work. 
      # So we will simplify the process. 
      - name: Pull a sample image from Docker hub to ACR
        run: |
          az acr import --name ${{ env.DEV_AZURE_CONTAINER_REGISTRY }} --source docker.io/library/nginx:latest --image nginx:latest -g ${{ env.DEV_RESOURCE_GROUP }}
        continue-on-error: true
      # Builds and pushes an image up to your Azure Container Registry
      - name: Build and push image to ACR
        run: | 
          echo "You could build and push an image to ACR here by using the following commented commands"
      ### az acr build --image "${{env.DEV_AZURE_CONTAINER_REGISTRY}}.azurecr.io/<your-repo-name>:${{ github.sha }}" -r "${{ env.DEV_AZURE_CONTAINER_REGISTRY }}" -g ${{ env.DEV_RESOURCE_GROUP }} .
      - name: Checkout source code 
        uses: actions/checkout@v3
      # Use kubelogin to configure your kubeconfig for Azure auth
      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'
      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ env.DEV_RESOURCE_GROUP }}
          cluster-name: ${{ env.DEV_CLUSTER_NAME }}
          admin: 'true'
          use-kubelogin: 'true'
      # Deploys application based on given manifest file
      - name: Deploys application
        uses: Azure/k8s-deploy@v4
        with:
          action: deploy
          manifests: ${{ env.DEV_DEPLOYMENT_MANIFEST_PATH }}
          images: | 
            ${{ env.DEV_AZURE_CONTAINER_REGISTRY }}.azurecr.io/nginx:latest